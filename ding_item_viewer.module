<?php
/**
 * @file
 * Ding item viewer module.
 *
 * Shows ting items in form of a tabbed carousel.
 */

define('DING_ITEM_VIEWER_CONF_CACHE_ID', 'ding_item_viewer_conf_');

/**
 * Implements hook_menu().
 */
function ding_item_viewer_menu() {
  $menu = array();

  // AJAX handler.
  $menu['ding_item_viewer/%'] = array(
    'title' => 'Ding item viewer AJAX handler',
    'description' => 'Sends rendered items over AJAX',
    'page callback' => 'ding_item_viewer_ajax',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  $menu['ding_item_viewer_get_data'] = array(
    'title' => 'Ding item viewer data AJAX handler',
    'page callback' => 'ding_item_viewer_get_data',
    'page arguments' => array(),
    'access callback' => TRUE,
  );

  return $menu;
}

/**
 * Implements hook_permission().
 */
function ding_item_viewer_permission() {
  $perm = array();

  $perm['manage item viewer'] = array(
    'title' => t('Manage ding item viewer'),
    'description' => t(
      'Configure ding item viewer settings such as search query and cache time.'
    ),
  );

  return $perm;
}

/**
 * Implements hook_theme().
 */
function ding_item_viewer_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $mod_path = drupal_get_path('module', 'ding_item_viewer');

  $hooks['ding_item_viewer_admin_form'] = array(
    'render element' => 'form',
  );

  $hooks['ding_item_viewer_container'] = array(
    'variables' => array(
      'url' => NULL,
      'preload_image' => theme_image(
        array(
          'path' => $mod_path . '/img/loader.gif',
          'alt' => t('Loading'),
          'attributes' => array(),
        )
      ),
      'query_hash' => NULL,
    ),
    'template' => 'templates/ding_item_viewer.container',
  );

  $hooks['item_viewer_tab_single'] = array(
    'variables' => array(),
    'template' => 'templates/ding_item_viewer.single-tab',
  );

  $hooks['item_viewer_tabs'] = array(
    'variables' => array(),
    'template' => 'templates/ding_item_viewer.tabs',
  );

  $hooks['item_viewer_content'] = array(
    'variables' => array(),
    'template' => 'templates/ding_item_viewer.content',
  );

  $hooks['ding_item_viewer_item'] = array(
    'variables' => array(),
    'template' => 'ding_item_viewer.item',
    'path' => $path . '/templates',
  );

  $hooks['ding_item_viewer_item_active'] = array(
    'variables' => array(),
    'template' => 'ding_item_viewer.item_active',
    'path' => $path . '/templates',
  );

  $hooks['ding_item_viewer'] = array(
    'variables' => array(
      'item_viewer' => NULL,
    ),
    'template' => 'ding_item_viewer',
    'path' => '/templates',
  );

  return $hooks;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_item_viewer_ctools_plugin_directory($owner, $plugin_type) {
  // we'll be nice and limit scandir() calls
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_block_info().
 */
function ding_item_viewer_block_info() {
  $blocks = array();

  $blocks['item_viewer'] = array(
    'info' => t('Ding item viewer'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ding_item_viewer_block_view($delta) {
  $block = array();
  $block['content'] = '';

  switch ($delta) {
    case 'item_viewer':
      // Load required JS and CSS files.
      drupal_add_library('system', 'drupal.ajax');
      drupal_add_css(drupal_get_path('module', 'ding_item_viewer') . '/css/ding_item_viewer.css');
      drupal_add_js(drupal_get_path('module', 'ding_item_viewer') . '/js/ding_item_viewer.js');

      if (module_exists('ding_availability')) {
        drupal_add_js(drupal_get_path('module', 'ding_availability') . '/js/ding_availability.js');
      }

      $js_setting = array(
        'ding_item_viewer' => array(
          'visible_items' => 6,
          'big_item_positon' => 3,
          'interval' => variable_get('ding_item_viewer_interval', 5),
        ),
      );
      drupal_add_js($js_setting, 'setting');

      $block['content'] = theme('ding_item_viewer_container');
      break;
  }

  return $block;
}

/**
 * Check covers for certain identifiers.
 *
 * This also stores the original images.
 *
 * @param array $ids
 *   Items faust number.
 *
 * @return array
 *   Set of results, keyed by id with boolean values.
 */
function ding_item_viewer_check_covers(array $ids) {
  module_load_include('inc', 'ting_covers', 'ting_covers.pages');

  $cover_data = array();
  array_walk($ids, function($v) use (&$cover_data) {
    $local_id = explode(':', $v);

    $cover_data[$local_id[1]] = array(
      'local_id' => $local_id[1],
      'owner_id' => $local_id[0],
      'image_style' => 'large',
    );
  });

  $covers = ting_covers_objects(FALSE, $cover_data);

  $result = array();
  array_walk($covers, function($v) use (&$result, $cover_data) {
    $faust_number = $cover_data[$v['local_id']]['owner_id'] . ':' . $cover_data[$v['local_id']]['local_id'] ;
    $result[$faust_number] = TRUE;
  });

  return $result;
}

/**
 * Perform ting search.
 *
 * @param string $query
 *   Searched query string.
 * @param int $page
 *   Requested results page.
 * @param int $records
 *   Number of records to fetch.
 * @param string $sort
 *   Sorting order.
 *
 * @return object|bool
 *   Ting search result object or FALSE.
 */
function ding_item_viewer_search_ting($query = '', $page = 1, $records = 10, $sort = '') {
  module_load_include('inc', 'ting', 'ting.client');

  if (!empty($query)) {
    $query = '(' . $query . ')';

    $options = array(
      'allObjects' => FALSE,
      'enrich' => TRUE,
      'sort' => $sort,
    );

    $search_result = ting_do_search($query, $page, $records, $options);

    return $search_result;
  }

  return FALSE;
}

/**
 * Generate a cache id, based on a keyword.
 *
 * @param string $keyword
 *   A generic keyword.
 *
 * @return string
 *   Hash string, meaning a certain cache id.
 */
function ding_item_viewer_generate_cache_id($keyword) {
  return 'ding_item_viewer-' . drupal_hash_base64($keyword);
}

/**
 * Implements hook_ding_item_cache().
 */
function ding_item_viewer_ding_item_cache() {
  return array(
    'ding_item_viewer' => t('Ding item viewer'),
  );
}

/**
 * Implements hook_entity_info_alter().
 *
 * Set special view modes for item viewer.
 */
function ding_item_viewer_entity_info_alter(&$entity_info) {
  if (!isset($entity_info['ting_object']['view modes'])) {
    return;
  }

  $entity_info['ting_object']['view modes'] += array(
    'ding_item_viewer_small' => array(
      'label' => t('Ding item viewer (small)'),
      'custom settings' => TRUE,
    ),
    'ding_item_viewer_big' => array(
      'label' => t('Ding item viewer (big)'),
      'custom settings' => TRUE,
    ),
  );
}


/**
 * Assembles item viewer data.
 *
 * @param string $hash.
 *
 * @return array.
 */
function ding_item_viewer_get_data($hash) {
  $result = array(
    'tabs' => ding_item_viewer_build_tabs($hash),
    'content' => theme('item_viewer_content'),
    'items' => ding_item_viewer_build_data($hash),
  );

  return $result;
}

/**
 * Get cached configuration by it's hash.
 *
 * @param string $cache_id
 *
 * @param string $hash
 *
 * @return array|boolean
 */
function ding_item_viewer_get_cache_by_hash($cache_id, $hash) {
  $cache = cache_get($cache_id . $hash);

  if (!empty($cache->data)) {
    return reset($cache->data);
  }

  return FALSE;
}

/**
 * Build tabs for item viewer.
 *
 * @param string $hash.
 *
 * @return string
 *   Tabs layout markup.
 */
function ding_item_viewer_build_tabs($hash) {
  $cached_setting = ding_item_viewer_get_cache_by_hash(DING_ITEM_VIEWER_CONF_CACHE_ID, $hash);
  $queries = $cached_setting['searches'];

  $tabs = '';

  if (is_array($queries)) {
    foreach ($queries as $k => $query) {
      $tabs .= theme('item_viewer_tab_single', array('tab_index' => $k, 'tab_title' => $query['title']));
    }
  }

  return theme('item_viewer_tabs', array('tabs' => $tabs));
}

/**
 * Fetches items markup from cache.
 *
 * @param string $hash.
 *
 * @return array.
 */
function ding_item_viewer_build_data($hash) {
  $cached_setting = ding_item_viewer_get_cache_by_hash(DING_ITEM_VIEWER_CONF_CACHE_ID, $hash);
  $queries = $cached_setting['searches'];

  $result = array();

  if (is_array($queries)) {
    foreach ($queries as $query) {
      $cid = ding_item_viewer_generate_cache_id($query['title'] . $query['query']);
      $cache = cache_get($cid, 'cache_ding_item');
      $items = isset($cache->data) ? $cache->data : array();
      $result[] = $items;
    }
  }

  return $result;
}

/**
 * Outputs item viewer markup as a JSON object.
 *
 * @param string $hash
 *   Ding item viewer hash identifier.
 */
function ding_item_viewer_ajax($hash) {
  $response = array(
    'status' => 'OK',
    'data' => array(),
    'error' => '',
  );

  $result = ding_item_viewer_get_data($hash);
  $response['data'] = $result;

  drupal_json_output($response);
}

require_once 'ding_item_viewer.field.inc';
include_once 'ding_item_viewer.features.inc';

/**
 * Search queries admin form.
 */
function ding_item_viewer_content_type_edit_form($form, &$form_state) {
  if (!isset($form_state['restore'])) {
    $form_state['original_form'] = $form;
  }

  unset($form['override_title']);
  unset($form['override_title_text']);
  unset($form['override_title_markup']);

  //Form attachments
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'ding_item_viewer') . '/js/ding_item_viewer.admin.js',
  );
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'ding_item_viewer') . '/css/ding_item_viewer.styles.css',
  );

  variable_set('ding_item_viewer_search_queries_hidden', array());
  $searches_num = !empty($form_state['values']['num_searches']) ? $form_state['values']['num_searches'] : 0;
  $clicked_btn = '';
  $remove_btn = '';
  $hidden = variable_get('ding_item_viewer_search_queries_hidden', array());

  if (isset($form_state['clicked_button'])) {
    $clicked_btn = $form_state['clicked_button']['#name'];

    // Get a clicked 'remove' button.
    foreach ($form_state['buttons'] as $k => $v) {
      if ($v['#name'] == $clicked_btn) {
        if (preg_match('/edit-remove/', $v['#id'])) {
          $remove_btn = $k;
          $hidden[] = $remove_btn;
          variable_set('ding_item_viewer_search_queries_hidden', $hidden);
          break;
        }
      }
    }
  }

  $form['ding_item_viewer'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
  );

  // Get current saved queries.
  $searches = $form_state['conf']['searches'];

  $i = 0;
  $c = 1;

  // Display saved queries.
  if (isset($searches[0]['title'])) {
    $c = count($searches);
    for (; $i < $c; $i++) {
      $form['ding_item_viewer']['ting_searches']['search_' . $i] = ding_item_viewer_query_form($searches[$i], $i);
    }
  }

  // Whether add a new query field.
  if ($clicked_btn == 'add_query') {
    $searches_num++;
  }

  for (; $i < $searches_num + $c; $i++) {
    $unsubmitted = array();
    // Maybe prev field had some data in it...
    if (isset($form_state['input']['title'][$i])) {
      $unsubmitted = array(
        'title' => $form_state['input']['title'][$i],
        'subtitle' => $form_state['input']['subtitle'][$i],
        'query' => $form_state['input']['query'][$i],
      );
    }

    $form['ding_item_viewer']['ting_searches']['search_' . $i] = ding_item_viewer_query_form($unsubmitted, $i);
  }

  // Hide removed fields.
  for ($i = 0; $i < $searches_num + $c; $i++) {
    if (in_array($i, $hidden)) {
      // Hide title, used to sort needed queries when saving.
      $form['ding_item_viewer']['ting_searches']['search_' . $i]['title[]']['#value'] = '';
      $form['ding_item_viewer']['ting_searches']['search_' . $i]['#prefix'] = '<div class="search-query-hidden">';
      $form['ding_item_viewer']['ting_searches']['search_' . $i]['#suffix'] = '</div>';
    }
  }

  // Ajaxified button for new fields.
  $form['ding_item_viewer']['ding_item_viewer_query_add'] = array(
    '#type' => 'submit',
    '#submit' => array('_ding_item_viewer_add_entry_submit'),
    '#value' => t('Add another'),
    '#name' => 'add_query',
    '#ajax' => array(
      'callback' => 'ding_item_viewer_admin_form_ajaxify',
      'wrapper' => 'edit-ding-item-viewer',
      'method' => 'append',
      'effect' => 'fade',
    ),
  );

  // Keep track of query fields count.
  $form['ding_item_viewer']['num_searches'] = array(
    '#type' => 'hidden',
    '#value' => $searches_num,
  );

  $form['ding_item_viewer_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Frontend settings'),
  );

  $form['ding_item_viewer_settings']['ding_item_viewer_item_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Item limit'),
    '#description' => t('The number of items to be returned in search result.'),
    '#default_value' => variable_get('ding_item_viewer_item_limit', 18),
    '#size' => 3,
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $form['ding_item_viewer_settings']['ding_item_viewer_item_sorting'] = array(
    '#type' => 'select',
    '#title' => t('Sorting'),
    '#options' => array(
      '' => t('- None -'),
      'title_ascending' => t('Title (Ascending)'),
      'title_descending' => t('Title (Descending)'),
      'creator_ascending' => t('Creator (Ascending)'),
      'creator_descending' => t('Creator (Descending)'),
      'date_ascending' => t('Date (Ascending)'),
      'date_descending' => t('Date (Descending)'),
      'acquisitionDate_ascending' => t('Acquisition date (Ascending)'),
      'acquisitionDate_descending' => t('Acquisition date (Descending)'),
    ),
    '#default_value' => variable_get('ding_item_viewer_item_sorting', ''),
    '#description' => t('If not set, defaults to Ranking'),
  );

  $form['ding_item_viewer_settings']['ding_item_viewer_cache_ttl'] = array(
    '#type' => 'textfield',
    '#title' => t('Cache TTL'),
    '#description' => t('How many hours the cache lives.'),
    '#default_value' => variable_get('ding_item_viewer_cache_ttl', 1),
    '#size' => '3',
    '#element_validate' => array('element_validate_integer_positive'),

  );

  $form['ding_item_viewer_settings']['ding_item_viewer_interval'] = array(
    '#type' => 'textfield',
    '#title' => t('Slide interval'),
    '#default_value' => variable_get('ding_item_viewer_interval', 5),
    '#description' => t('The interval between sliding in seconds.'),
    '#size' => '3',
    '#element_validate' => array('element_validate_integer_positive'),
    '#required' => TRUE,
  );

  $form['ding_item_viewer_settings']['ding_item_viewer_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug'),
    '#default_value' => variable_get('ding_item_viewer_debug', FALSE),
    '#description' => t('Log the search process information.'),
  );

  // Custom form submit handler.
  $form['#submit'] = array('ding_item_viewer_content_type_edit_form_submit');

  return $form;
}

function _ding_item_viewer_add_entry_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $form_state['values']['num_searches'] += 1;
}

/**
 * AJAX responder for field addition/removal fields.
 */
function ding_item_viewer_admin_form_ajaxify($form, &$form_state) {
  $clicked_button = reset($form_state['clicked_button']['#parents']);
  if ('remove[]' == $clicked_button) {
    $form_state['rebuild'] = TRUE;
    $form_state['values']['num_searches'] -= 1;
    $parents = $form_state['clicked_button']['#array_parents'];
    unset($form['ding_item_viewer']['ting_searches'][$parents[2]]);

    return $form['ding_item_viewer']['ting_searches'];
  }
  elseif ('submit' == $clicked_button) {
    $form_state['values']['num_searches'] += 1;
    $i = $form_state['values']['num_searches'];

    return $form['ding_item_viewer']['ting_searches']['search_' . $i];
  }
}

/**
 * Form part, describing query fields.
 *
 * @param array $item
 *   Values for existing query.
 *
 * @return array
 *   Fields structure.
 */
function ding_item_viewer_query_form($item = array(), $index = 0) {
  $form = array();

  $form['sort[]'] = array(
    '#type' => 'weight',
    '#delta' => 5,
    '#default_value' => 0,
    '#value' => 0,
    '#attributes' => array(
      'class' => array(
        'sort-hidden',
      ),
    ),
  );

  $form['title[]'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('The title of the search is used for the tab in the browsebar. Keep it short.'),
    '#default_value' => isset($item['title']) ? $item['title'] : '',
    '#prefix' => '<div class="search-item_viewer-query">',
  );

  $form['subtitle[]'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#description' => t('The subtitle displayed next to the search results.'),
    '#default_value' => isset($item['subtitle']) ? $item['subtitle'] : '',
  );

  $form['query[]'] = array(
    '#type' => 'textfield',
    '#title' => t('Query'),
    '#maxlength' => 2048,
    '#description' => t('The query to display search results for.'),
    '#default_value' => isset($item['query']) ? $item['query'] : '',
  );

  $form['remove[]'] = array(
    '#type' => 'button',
    '#value' => t('Remove'),
    '#name' => 'remove_' . $index,
    '#attributes' => array(
      'class' => array(
        'remove',
      ),
    ),
    '#suffix' => '</div><div class="clear"></div>',
    '#ajax' => array(
      'callback' => 'ding_item_viewer_admin_form_ajaxify',
      'wrapper' => 'edit-ding-item-viewer',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  return $form;
}

/**
 * Submit handler for admin backend queries form.
 */
function ding_item_viewer_content_type_edit_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $form_state['conf'] = array(
    'ding_item_viewer_item_limit' => $values['ding_item_viewer_item_limit'],
    'ding_item_viewer_item_sorting' => $values['ding_item_viewer_item_sorting'],
    'ding_item_viewer_cache_ttl' => $values['ding_item_viewer_cache_ttl'],
    'ding_item_viewer_interval' => $values['ding_item_viewer_interval'],
    'ding_item_viewer_debug' => $values['ding_item_viewer_debug'],
  );

  $c = count($form_state['input']['title']);
  $searches = array();

  for ($i = 0; $i < $c; $i++) {
    // Make an array for saving, ignoring queries w/o title.
    $title = trim($form_state['input']['title'][$i]);
    $subtitle = trim($form_state['input']['subtitle'][$i]);
    $query = trim($form_state['input']['query'][$i]);

    if (!empty($title) && !empty($query)) {
      $searches[] = array(
        'title' => $title,
        'subtitle' => $subtitle,
        'query' => $query,
      );
    }
  }

  $form_state['conf']['searches'] = $searches;

  // Clear all item list cache.
  module_invoke('ding_item_cache', 'clear_all');

  // Start batch operations if there are some themes.
  if (count($searches) < 1) {
    return;
  }

  $cache_ttl = 0;
  if (!empty($form_state['conf']['ding_item_viewer_cache_ttl'])) {
    $cache_ttl = $form_state['conf']['ding_item_viewer_cache_ttl'] * 3600;
  }

  foreach ($searches as $search) {
    $search_result = ding_item_viewer_search_ting($search['query'], 1, 50, $values['ding_item_viewer_item_sorting']);

    $count_search_results = $search_result->numTotalCollections;
    if ($count_search_results > 0) {
      $collection_ids = array_keys($search_result->collections);
      $cover_exists = ding_item_viewer_check_covers($collection_ids);
      $cache_id = ding_item_viewer_generate_cache_id($search['title'] . $search['query']);
      $item_ids = array_keys($cover_exists);

      $objects = ding_entity_load_multiple($item_ids);

      $items = array();
      foreach ($objects as $item) {
        $build = ting_object_view($item, 'ding_item_viewer_big');
        $big = drupal_render($build);
        $build = ting_object_view($item, 'ding_item_viewer_small');
        $small = drupal_render($build);

        $items[$item->localId] = array(
          'small' => $small,
          'big' => $big,
        );
      }

      // Cache rendered items.
      cache_set($cache_id, $items, 'cache_ding_item', REQUEST_TIME + $cache_ttl);
    }
  }
}

/**
 * Return the pane contents.
 */
function ding_item_viewer_content_type_render($subtype, $conf, $panel_args, $context) {
  $searches = $conf['searches'];
  unset($conf['searches']);

  $hash_string = '';
  foreach ($searches as $search) {
    $hash_string .= trim($search['query']);
  }
  $ding_item_viewer_hash = md5($hash_string);

  $ding_item_viewer_conf = array(
    $ding_item_viewer_hash => array(
      'hash' => $ding_item_viewer_hash,
      'searches' => $searches,
      '$config' => $conf,
    ),
  );

  $cache_id = DING_ITEM_VIEWER_CONF_CACHE_ID . $ding_item_viewer_hash;
  cache_set($cache_id, $ding_item_viewer_conf, 'cache');

  $block = new stdClass();

  // Load required JS and CSS files.
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_css(drupal_get_path('module', 'ding_item_viewer') . '/css/ding_item_viewer.css');
  drupal_add_js(drupal_get_path('module', 'ding_item_viewer') . '/js/ding_item_viewer.js');

  if (module_exists('ding_availability')) {
    drupal_add_js(drupal_get_path('module', 'ding_availability') . '/js/ding_availability.js');
  }

  $js_setting = array(
    'ding_item_viewer' => array(
      'visible_items' => 6,
      'big_item_positon' => 3,
      'interval' => variable_get('ding_item_viewer_interval', 5),
    ),
  );
  drupal_add_js($js_setting, 'setting');

  $block->content = theme('ding_item_viewer_container', array('url' => url('ding_item_viewer/' . $ding_item_viewer_hash)));

  return $block;
}
