<?php
/**
 * @file
 * Ding item viewer module.
 *
 * Shows ting items in form of a tabbed carousel.
 */

/**
 * Implements hook_menu().
 */
function ding_item_viewer_menu() {
  $menu = array();

  // Configuration page.
  $menu['admin/config/ding/item_viewer'] = array(
    'title' => 'Ding item viewer',
    'description' => 'Configure ding item viewer',
    'access arguments' => array('manage item viewer'),
    'page callback' => 'ding_item_viewer_admin_page',
    'page arguments' => array(),
    'file' => 'ding_item_viewer.admin.inc',
  );

  // AJAX handler.
  $menu['ding_item_viewer'] = array(
    'title' => 'Ding item viewer AJAX handler',
    'description' => 'Sends rendered items over AJAX',
    'page callback' => 'ding_item_viewer_ajax',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $menu['ding_item_viewer_get_data'] = array(
    'title' => 'Ding item viewer data AJAX handler',
    'page callback' => 'ding_item_viewer_get_data',
    'page arguments' => array(),
    'access callback' => TRUE,
  );

  return $menu;
}

/**
 * Implements hook_permission().
 */
function ding_item_viewer_permission() {
  $perm = array();

  $perm['manage item viewer'] = array(
    'title' => t('Manage ding item viewer'),
    'description' => t(
      'Configure ding item viewer settings such as search query and cache time.'
    ),
  );

  return $perm;
}

/**
 * Implements hook_theme().
 */
function ding_item_viewer_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $mod_path = drupal_get_path('module', 'ding_item_viewer');

  $hooks['ding_item_viewer_admin_form'] = array(
    'render element' => 'form',
  );

  $hooks['ding_item_viewer_container'] = array(
    'variables' => array(
      'url' => NULL,
      'preload_image' => theme_image(
        array(
          'path' => $mod_path . '/img/loader.gif',
          'alt' => t('Loading'),
          'attributes' => array(),
        )
      ),
      'query_hash' => NULL,
    ),
    'template' => 'templates/ding_item_viewer.container',
  );

  $hooks['item_viewer_tab_single'] = array(
    'variables' => array(),
    'template' => 'templates/ding_item_viewer.single-tab',
  );

  $hooks['item_viewer_tabs'] = array(
    'variables' => array(),
    'template' => 'templates/ding_item_viewer.tabs',
  );

  $hooks['item_viewer_content'] = array(
    'variables' => array(),
    'template' => 'templates/ding_item_viewer.content',
  );

  $hooks['ding_item_viewer_item'] = array(
    'variables' => array(),
    'template' => 'ding_item_viewer.item',
    'path' => $path . '/templates',
  );

  $hooks['ding_item_viewer_item_active'] = array(
    'variables' => array(),
    'template' => 'ding_item_viewer.item_active',
    'path' => $path . '/templates',
  );

  $hooks['ding_item_viewer'] = array(
    'variables' => array(
      'item_viewer' => NULL,
    ),
    'template' => 'ding_item_viewer',
    'path' => '/templates',
  );

  return $hooks;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_item_viewer_ctools_plugin_directory($owner, $plugin_type) {
  // we'll be nice and limit scandir() calls
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_block_info().
 */
function ding_item_viewer_block_info() {
  $blocks = array();

  $blocks['item_viewer'] = array(
    'info' => t('Ding item viewer'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ding_item_viewer_block_view($delta) {
  $block = array();
  $block['content'] = '';

  switch ($delta) {
    case 'item_viewer':
      // Load required JS and CSS files.
      drupal_add_library('system', 'drupal.ajax');
      drupal_add_css(drupal_get_path('module', 'ding_item_viewer') . '/css/ding_item_viewer.css');
      drupal_add_js(drupal_get_path('module', 'ding_item_viewer') . '/js/ding_item_viewer.js');

      if (module_exists('ding_availability')) {
        drupal_add_js(drupal_get_path('module', 'ding_availability') . '/js/ding_availability.js');
      }

      $js_setting = array(
        'ding_item_viewer' => array(
          'visible_items' => 6,
          'big_item_positon' => 3,
          'interval' => variable_get('ding_item_viewer_interval', 5),
        ),
      );
      drupal_add_js($js_setting, 'setting');

      $block['content'] = theme('ding_item_viewer_container');
      break;
  }

  return $block;
}

/**
 * Check covers for certain identifiers.
 *
 * This also stores the original images.
 *
 * @param array $ids
 *   Items faust number.
 *
 * @return array
 *   Set of results, keyed by id with boolean values.
 */
function ding_item_viewer_check_covers(array $ids) {
  module_load_include('inc', 'ting_covers', 'ting_covers.pages');

  $cover_data = array();
  array_walk($ids, function($v) use (&$cover_data) {
    $local_id = explode(':', $v);

    $cover_data[$local_id[1]] = array(
      'local_id' => $local_id[1],
      'owner_id' => $local_id[0],
      'image_style' => 'large',
    );
  });

  $covers = ting_covers_objects(FALSE, $cover_data);

  $result = array();
  array_walk($covers, function($v) use (&$result, $cover_data) {
    $faust_number = $cover_data[$v['local_id']]['owner_id'] . ':' . $cover_data[$v['local_id']]['local_id'] ;
    $result[$faust_number] = TRUE;
  });

  return $result;
}

/**
 * Perform ting search.
 *
 * @param string $query
 *   Searched query string.
 * @param int $page
 *   Requested results page.
 * @param int $records
 *   Number of records to fetch.
 * @param string $sort
 *   Sorting order.
 *
 * @return object|bool
 *   Ting search result object or FALSE.
 */
function ding_item_viewer_search_ting($query = '', $page = 1, $records = 10, $sort = '') {
  module_load_include('inc', 'ting', 'ting.client');

  if (!empty($query)) {
    $query = '(' . $query . ')';

    $options = array(
      'allObjects' => FALSE,
      'enrich' => TRUE,
      'sort' => $sort,
    );

    $search_result = ting_do_search($query, $page, $records, $options);

    return $search_result;
  }

  return FALSE;
}

/**
 * Generate a cache id, based on a keyword.
 *
 * @param string $keyword
 *   A generic keyword.
 *
 * @return string
 *   Hash string, meaning a certain cache id.
 */
function ding_item_viewer_generate_cache_id($keyword) {
  return 'ding_item_viewer-' . drupal_hash_base64($keyword);
}

/**
 * Implements hook_ding_item_cache().
 */
function ding_item_viewer_ding_item_cache() {
  return array(
    'ding_item_viewer' => t('Ding item viewer'),
  );
}

/**
 * Implements hook_entity_info_alter().
 *
 * Set special view modes for item viewer.
 */
function ding_item_viewer_entity_info_alter(&$entity_info) {
  if (!isset($entity_info['ting_object']['view modes'])) {
    return;
  }

  $entity_info['ting_object']['view modes'] += array(
    'ding_item_viewer_small' => array(
      'label' => t('Ding item viewer (small)'),
      'custom settings' => TRUE,
    ),
    'ding_item_viewer_big' => array(
      'label' => t('Ding item viewer (big)'),
      'custom settings' => TRUE,
    ),
  );
}


/**
 * Assembles item viewer data.
 */
function ding_item_viewer_get_data() {
  $result = array(
    'tabs' => ding_item_viewer_build_tabs(),
    'content' => theme('item_viewer_content'),
    'items' => ding_item_viewer_build_data(),
  );

  return $result;
}

/**
 * Build tabs for item viewer.
 *
 * @return string
 *   Tabs layout markup.
 */
function ding_item_viewer_build_tabs() {
  $queries = variable_get('ding_item_viewer_search_queries');

  $tabs = '';

  if (is_array($queries)) {
    foreach ($queries as $k => $query) {
      $tabs .= theme('item_viewer_tab_single', array('tab_index' => $k, 'tab_title' => $query['title']));
    }
  }

  return theme('item_viewer_tabs', array('tabs' => $tabs));
}

/**
 * Fetches items markup from cache.
 */
function ding_item_viewer_build_data() {
  $queries = variable_get('ding_item_viewer_search_queries');

  $result = array();

  if (is_array($queries)) {
    foreach ($queries as $query) {
      $cid = ding_item_viewer_generate_cache_id($query['title'] . $query['query']);
      $cache = cache_get($cid, 'cache_ding_item');
      $items = isset($cache->data) ? $cache->data : array();
      $result[] = $items;
    }
  }

  return $result;
}

/**
 * Outputs item viewer markup as a JSON object.
 */
function ding_item_viewer_ajax() {
  dump('exit');exit;
  $response = array(
    'status' => 'OK',
    'data' => array(),
    'error' => '',
  );

  dump('hello');exit;
  $result = ding_item_viewer_get_data();
  $response['data'] = $result;

  drupal_json_output($response);
}

require_once 'ding_item_viewer.field.inc';
include_once 'ding_item_viewer.features.inc';
